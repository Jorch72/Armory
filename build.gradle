//Buildscript: Armory
// Load the properties of this project.
ext.configFile = file "build.properties"

//Reference the properties inside the project:
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

//Date formatting helper function
def getDate() {
    def date = new Date()
    def formattedDate = date.format('dd-MM-yyyy : hh:mm:ss')
    return formattedDate
}

def build_file = new File("build_mode.properties")
def build_mode = build_file.text


//ForgeGradle BuildScript.
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

//The repositories in which the dependencies are stored:
repositories {
    mavenCentral()
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { //The repo to get NEI etc
        name 'CB FS'
        url 'http://chickenbones.net/maven'
    }
    maven { //The repo to get TiC
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { //Forges own repo
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven { //My own repo (used for uploading and dependency)
        name 'OrionMavenRepo'
        url 'http://mavenrepo.orionminecraft.com/'
    }
}

//Apply the gradle plugins.
apply plugin: 'java'
apply plugin: 'forge'
apply plugin: 'maven'
apply plugin: 'curseforge'

//These configurations are needed for uploading to a MavenRepo:
configurations {
    deployerJars
}

//Initializing the mod environment
version = config.mod_version.toString() + "-" + System.getenv().TRAVIS_BUILD_NUMBER.toString()
if(System.getenv().TRAVIS_BRANCH.toString().contains("Development"))
{
    version = version + "-SNAPSHOT"
}
group= "com.Orion.Armory"
archivesBaseName = "Armory"

def ChangeLogText = "The changelog was not madeup during the BuildProcess."

//IDea fix for
idea {
    module {
        inheritOutputDirs = true
    }
}

//Sets up the currect versions for minecraft and Forge
minecraft {
    version = config.forge_version.toString() + "-" + config.minecraft_version
    runDir = "run/assets"

    //Replacing stuff inside the code:
    replace "@VERSION@", project.version
    replaceIn "Armory.java"
}

//Tells gradle which dependencies are needed for gradle and project
dependencies {
    //Mod dependencies
    compile "codechicken:CodeChickenLib:${config.minecraft_version}-${config.CCLIB_version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft_version}-${config.ccc_version}:dev"
    compile "codechicken:NotEnoughItems:${config.minecraft_version}-${config.NEI_version}:dev"

    //Maven uploader
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.2'
}

sourceSets {
    main {
        java {
            srcDir 'src/Armory'
        }
        resources {
            srcDir 'resources'
        }
    }
}


//This will process all the resources used during build, and needed for running the project
processResources
{
    //This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    //Replaces stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    //Copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    exclude '**/Thumbs.db'
}

//The following function comes with thanks to AbrarSyed:
//Copying the coremod dependencies from the classpath to the mods directory so the system can load them in a Dev Env.
//This is not executed during build!
task copyChicken(type: Copy){
    from configurations.compile
    include "**/*Chicken*.jar", "**/*NotEnoughItems*.jar"
    exclude "**/CodeChickenLib*" // because CCC downloads it anyways.. -_-
    into file(minecraft.runDir + "/mods") // parallel to the assets dir
}

//External task for settingup the a dev environment to develop Armory inc. NEI and WAILA 
task createDevSetup{
    description "Creates a full decompiled and ready to go (as far as possible) dev environment."
}

//Set the dependencies properly for the createDevSetup task.
tasks.createDevSetup.dependsOn("setupDevWorkspace", "setupDecompWorkspace", "copyChicken")

curse {
    onlyIf { ((System.getenv().CURSEAPIKEY != null) && (!build_mode.toString().trim().equals("SYNC")) && (!build_mode.toString().trim().equals("RELEASE"))) }

    projectId = System.getenv().CURSEPROJECTID
    apiKey = System.getenv().CURSEAPIKEY
    changelog = "Check out: " + "https://github.com/" + System.getenv().TRAVIS_REPO_SLUG.toString() + "/commits/" + System.getenv().TRAVIS_BRANCH.toString() + " for all Changes."

    if (System.getenv().TRAVIS_BRANCH.toString().contains("Development"))
    {
        releaseType = "Alpha"
    }
    else
    {
        releaseType = "Beta"
    }
}

curse.dependsOn {
    reobf
}

//Function to upload completed project to the maven repo.
uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        if(System.getenv().TRAVIS_BRANCH.toString().contains("Development"))
        {
            snapshotRepository(url: "ftp://mavenrepo.orionminecraft.com"){
                authentication(userName: "mavenrepo.orionminecraft.com|" + System.getenv().FTPUserName.toString(), password: System.getenv().FTPPassword.toString())
            }
        }
        else {
            repository(url: "ftp://mavenrepo.orionminecraft.com") {
                authentication(userName: "mavenrepo.orionminecraft.com|" + System.getenv().FTPUserName.toString(), password: System.getenv().FTPPassword.toString())
            }
        }

        pom {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName
        }

        pom.project {
            name project.archivesBaseName
            packaging 'jar'
            description 'Armory'
            url 'https://github.com/SmithsModding/Armory'

            scm {
                url 'https://github.com/SmithsModding/Armory'
                connection 'scm:git:git://github.com/SmithsModding/Armory.git'
                developerConnection 'scm:git:git@github.com/SmithsModding/Armory.git'
            }

            issueManagement {
                system 'github'
                url 'https://github.com/SmithsModding/Armory/issues'
            }

            developers {
                developer {
                    id 'OrionDevelopment'
                    name 'Orion'
                    roles {
                        role 'developer'
                    }
                }
            }
        }

    }
}

task('createGithubBranches') << {
    logger.lifecycle("Current active buildmode: " + build_mode.toString())

    if ((System.getenv().TRAVIS_BRANCH.toString().contains("Development")) && (build_mode.toString().trim().equals("RELEASE")))
    {
        build_file.text = build_file.text.replace("RELEASE", "DEBUG")

        logger.lifecycle("Uploading code to the corresponding Minecraft version branch. Creating branch if needed.")
        logger.lifecycle("Creating local branch.")
        //Creates/Or checks out the new local branch.
        def createLocalBranchCMD = "git checkout -b Minecraft-" + config.minecraft_version.toString()
        def createLocalProg = createLocalBranchCMD.execute();
        createLocalProg.waitFor()
        

        //Adds a tag to the minecraft version specific branch for the version number.
        logger.lifecycle("Adding version tag.")
        def addTagCMD = "git -a Version[" + version + "] -m 'Autobuild by Travis CI. Build on: " + getDate() + ".'"
        def addTagProg = addTagCMD.execute()
        addTagProg.waitFor()

        logger.lifecycle("Uploading force push to repo.")
        def setUrlCMD = "git config remote.origin.url https://" + System.getenv().GitUsername.toString() + ":" + System.getenv().GitPassword.toString() + "@github.com/SmithsModding/Armory"
        def setURLProg = setUrlCMD.execute()
        setURLProg.waitFor()

        def cmd = "git push origin -f Minecraft-" + config.minecraft_version.toString()
        def prog = cmd.execute()
        prog.waitFor()

        logger.lifecycle("Mirrored the code the corresponding minecraft version branch. Current MC Version: " + config.minecraft_version.toString() + ". Branch name: Minecraft-" + config.minecraft_version.toString() + ".")
    }
}

//The external task that executes the uploadAtchives function.
task('uploadJars', dependsOn: uploadArchives) {
    description = "uploads JARs"
}

