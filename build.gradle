// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "m2"
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.7"
}

repositories {
    mavenLocal()
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    ivy {
        name 'Minecolonies TeamCity Repo'
        ivyPattern 'https://teamcity.minecolonies.com/guestAuth/repository/download/[module]/[revision]/teamcity-ivy.xml'
        artifactPattern 'https://teamcity.minecolonies.com/guestAuth/repository/download/[module]/[revision]/[artifact](.[ext])'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8

//Buildscript: armory
// Load the properties of this project.
ext.configFile = file "build.properties"

//Reference the properties inside the project:
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

//Date formatting helper function
def getDate() {
    def date = new Date()
    def formattedDate = date.format('dd-MM-yyyy : hh:mm:ss')
    return formattedDate
}

def build_mode = config.build_mode

//These configurations are needed for uploading to a MavenRepo:
configurations {
    deployerJars
}

//Initializing the mod environment
version = config.minecraft_version + "-" + config.mod_version.toString() + "-" + System.getenv().TRAVIS_BUILD_NUMBER.toString()
def apiversion = config.api_version.toString() + "-" + System.getenv().TRAVIS_BUILD_NUMBER.toString()

if(System.getenv().TRAVIS_BRANCH.toString().contains("Development"))
{
    version = version + "-SNAPSHOT"
    apiversion = apiversion + "-SNAPSHOT"
}

group = "com.smithsmodding.armory"
archivesBaseName = "armory"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"

    mappings = "snapshot_20180421"

    useDepAts = true

    //Replacing stuff inside the code:
    replace "@VERSION@", project.version
    replace "@MCVERSION@", config.minecraft_version
    replace "@APIVERSION@", apiversion
}

dependencies {
    //Mod dependencies
    deobfCompile ( 'org:SmithsCore_' + config.sc_build_type + 'Builds:' + config.sc_build_number ){
        artifact {
            name = 'smithscore-' + config.minecraft_version +'-' + config.sc_artifact_version +'-' + config.sc_artifact_id +'-' + config.sc_artifact_type
            type = 'jar'
        }
    }

    //deobfCompile group: 'com.smithsmodding.smithscore', name: 'smithscore', version: config.minecraft_version + "-" + config.smithscore_version
    deobfCompile "mezz.jei:jei_" + config.minecraft_version + ":" + config.jei_version

    //Mixins
    runtime('org.spongepowered:mixin:0.7.5-SNAPSHOT') {
        exclude module: 'launchwrapper'
    }

    //Maven uploader
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.8'
    compile 'org.jetbrains:annotations:15.0'
}

sourceSets {
    main {
        java {
            srcDir 'src/main'
        }
        resources {
            srcDir 'src/resources'
        }
    }
    api {
        java {
            srcDir 'src/api'
        }
    }
    test {
        java {
            srcDir 'src/test/api'
            srcDir 'src/test/main'
        }
    }
}

// Add API dir to the IDEA module
idea.module.sourceDirs += sourceSets.api.java.srcDirs

//This will process all the resources used during build, and needed for running the project
processResources
        {
            //Replaces stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'VERSION': project.version, 'MCVERSION': project.minecraft.version
            }

            //Copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
            exclude '**/Thumbs.db'
        }

jar {
    manifest {
        attributes 'FMLAT': 'Armory_at.cfg'
    }

    from sourceSets.main.output
    from sourceSets.api.output
}

javadoc {
    source += sourceSets.api.allSource
}

// add a javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier = 'api'
}

artifacts {
    archives javadocJar
    archives apiJar
}

curseforge {
    if (System.getenv().CURSEAPIKEY != null) {
        if (!build_mode.toString().trim().equals("SYNC")) {
            if ((build_mode.toString().trim().equals("DEBUG") && System.getenv().TRAVIS_BRANCH.toString().contains("Development")) || ((build_mode.toString().trim().equals("RELEASE") && !System.getenv().TRAVIS_BRANCH.toString().contains("Development")))) {
                apiKey = System.getenv().CURSEAPIKEY

                project {
                    id = '231229'
                    changelog = file('changelog.html')
                    changelogType = 'html'

                    if (System.getenv().TRAVIS_BRANCH.toString().contains("Development")) {
                        releaseType = "alpha"
                    } else {
                        releaseType = "beta"
                    }

                    relations {
                        requiredLibrary 'smithscore' // SmithScore is required
                    }

                    //TOTO: When API ready add here, as well as DevJar and JavaDocJar.
                }
            } else {
                logger.lifecycle("Cannot run the CurseUpload sequence. Curse upload is only done on the Development-Branch when in Debug mode, or on any other branch in Release mode. Current Branch: " + System.getenv().TRAVIS_BRANCH.toString() + " - Current build mode: " + build_mode.toString())
            }
        } else {
            logger.lifecycle("Cannot run CurseUpload sequence. We are currently synchronising to Computers.")
        }
    } else {
        logger.lifecycle("Cannot run the CurseUpload sequence. No API-Key was available.")
    }
}